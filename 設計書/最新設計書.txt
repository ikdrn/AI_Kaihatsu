---

### 1. フロントエンド（TypeScript + React）の要件

- **ディレクトリ選択機能**
  - ユーザーがローカルのプロジェクトディレクトリを選択できるUIを提供する  
    （例: `<input type="file" webkitdirectory="true" />` を利用）
  - 選択したディレクトリのパス情報を取得し、後続の処理に利用する

- **プレビュー表示機能**
  - 選択されたプロジェクトから `index.html` などのプレビュー用HTMLを取得する  
    （バックエンドのAPI `/api/getScreen` 経由）
  - 取得したHTMLを安全にレンダリングし、ユーザーに表示する

- **ドラッグ＆ドロップUIエディタ**
  - UIコンポーネント（例: テキストボックスなど）をドラッグ＆ドロップで配置できるエリアを提供する
  - ドラッグ開始、ドロップ時の位置情報の取得、イベント処理を実装する
  - ドロップ操作により、更新命令をバックエンドの `/api/updateUI` に送信する

- **APIとの連携**
  - `axios` などを利用して、バックエンドのAPI（`/api/getScreen`、`/api/updateUI`）と通信する
  - CORSやプロキシ設定（例: `package.json` に `"proxy": "http://localhost:8080"` を追加）を適切に設定する

---

### 2. バックエンド（GIN(GO)）の要件

- **APIエンドポイントの実装**
  - `/api/getScreen`: 指定されたプロジェクト（例: `projects/<projectPath>/index.html`）のHTMLを取得して返す
  - `/api/updateUI`: フロントエンドから送信されたUI更新命令（コンポーネントの種類、位置、アクションなど）を受け取り、コードを修正する

- **AI連携機能**
  - 抽象的な指示（例: 「テキストボックスを追加」）をAIに送信し、修正すべきコードを生成する  
    （実際にはOpenAI API等の外部サービスとの連携を検討）
  - AIからのレスポンスをパースし、プロジェクトのコードに反映する

- **ファイル操作**
  - 指定されたプロジェクトディレクトリ内のファイル（例: `index.html`）を読み込み・書き込みする
  - ファイルの存在確認やエラーハンドリングを適切に実施する

---

### 3. システム全体の要件

- **リアルタイム性・ホットリロード**
  - UIの変更内容がすぐにプレビューに反映される仕組み（ホットリロード等）を検討する

- **セキュリティ対策**
  - ディレクトリパスやファイル操作に関する検証、権限チェック、不正アクセス防止の実装
  - AI連携部分でも、ユーザー入力の安全性を担保する対策

- **拡張性・保守性**
  - コンポーネントベースでの開発を行い、新たなUI要素や機能を容易に追加できる設計
  - モジュール化やドキュメント整備により、将来的な機能拡張やメンテナンスをしやすくする

- **開発環境の整備**
  - Node.js と npm を用いたフロントエンドのビルド・実行環境
  - Go の実行環境および依存管理の設定


### 4.ディレクトリ構造
AI_kaihatsu/
├── ai_back/
│   └── main.go
└── ai_front/
    ├── package.json
    ├── tsconfig.json
    └── src/
         ├── index.tsx
         ├── App.tsx
         └── components/
              ├── DirectorySelector.tsx
              ├── PreviewPanel.tsx
              └── DragDropEditor.tsx

### 5.バージョン管理
yarn 1.22.22
go version go1.23.4 windows/amd64
nmp 19.0.0

---